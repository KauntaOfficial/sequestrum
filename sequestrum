#!/usr/bin/python
#
# Sequestrum - Dotfile Manager

# Libraries
import sys
import yaml
from pathlib import Path

homePath = str(Path.home()) + "/"
sys.path.insert(0, homePath + "/Sequestrum/Modules")

# Modules
import directoryModule as dirMod
import symlinkModule as symMod
import argumentsModule as argMod
import commandsModule as comMod

# Grab Arguments
arguments = argMod.getArguments()

# Creates a new directory. It creates a new folder path using the config
# then creates a new folder using that path. It then loops through each
# link in the links list and **copies** (not symlinking) the original file
# on the source system over to the dotfiles.
def setupDirectory(directoryKey):
    """
        Setup package directory on dotfile
    """
    # Make a path for the new directory path using the name specified in the
    # config then make the folder using the path.
    newDirectoryPath = dotfilePath + \
        configDict['options'][directoryKey]['directoryName'] + "/"
    dirMod.createFolder(newDirectoryPath)

    # Loop through all the links set in the config. For each one, grab the
    # path for both the source file on the computer and the file that it will
    # be copied to within the dotfiles. After that, make sure the source file
    # exists. If it does, check to see if it is either a file of a folder then
    # use the appropriate copying method.
    for link in configDict['options'][directoryKey]['links']:
        for key, value in link.items():
            sourceFile = homePath + value
            destFile = newDirectoryPath + key

            if symMod.symlinkSourceExists(sourceFile):
                if dirMod.isFolder(sourceFile):
                    symMod.copyFolder(sourceFile, destFile)
                elif dirMod.isFile(sourceFile):
                    symMod.copyFile(sourceFile, destFile)
                else:
                    return False
            else:
                return False
    return True


# Install Directory
def installDirectory(directoryKey):
    """
        Install package to local system
    """
    # Grab dotfile package directory
    directoryPath = dotfilePath + \
        configDict['options'][directoryKey]['directoryName'] + "/"

    # Loop through files to link
    for link in configDict['options'][directoryKey]['links']:
        # Symlink files to local files
        for key, value in link.items():
            sourceFile = directoryPath + key
            destFile = homePath + value

            # Make sure file exists in dotfiles
            if symMod.symlinkSourceExists(sourceFile):
                if dirMod.isFolder(sourceFile):
                    symMod.createSymlink(sourceFile, destFile)
                elif dirMod.isFile(sourceFile):
                    symMod.createSymlink(sourceFile, destFile)
                else:
                    return False
            else:
                return False
    return True


# Main Program
configFile = open("config.yaml", "r")
configDict = yaml.load(configFile)
directoryList = []

# Grab list of directories
for key, value in configDict['options'].items():
    if key.endswith("Directory"):
        directoryList.append(key[:-9])

# Dotfile directory
dotfilePath = homePath + \
    configDict['options']['base']['dotfileDirectory'] + "/"

# Setup- Sets up dotfiles (Only run once)
if arguments[0] in {"-s", "--setup"}:
    if arguments[1] == "all":
        for key, value in configDict['options'].items():
            if key.endswith("Directory"):
                if "commandsBefore" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
                setupDirectory(key)
                if "commandsAfter" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
    else:
        print("Valid Usage: sequestrum -s")

# Install- Symlink dotfiles to local files
elif arguments[0] in {"-i", "--install"}:
    # Install all packages
    if arguments[1] == "all":
        for key, value in configDict['options'].items():
            if key.endswith("Directory"):
                if "commandsBefore" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
                dirMod.installDirectory(key)
                if "commandsAfter" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])

    # Only install specified package
    elif arguments[1] in directoryList:
        for key, value in configDict['options'].items():
            if key == arguement[1] + "Directory":
                if "commandsBefore" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
                dirMod.installDirectory(key)
                if "commandsAfter" in value:
                    comMod.runCommands(
                        configDict['options'][key]["commandsBefore"])
else:
    print("Invalid Command")
