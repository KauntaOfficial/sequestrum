#!/usr/bin/env bash
#
# sequestrum - dotfile manager

set -e
shopt -s dotglob

# TODO: CLEan option to clean out directories with dead links
# TODO: IMPLEMENT THIS CLEANING INTO COMMANDS 
# TODO: Check that all symlink locations are clear before doing anything .

if [ -e "$HOME/.local/share/sequestrum/.dot_location" ]; then
    source "$HOME/.local/share/sequestrum/.dot_location"
else
    dotfile_location="$HOME/dots"
fi

basename() {
    : "${1%/}"
    printf '%s\n' "${_##*/}"
}

create_symlink() {
        ln -s "$1" "$2" || die "Could not create symlink from $1 >> $2. Cleaning database."
} 

check_config() {
    printf '%s\n' "Todo: Check to make sure the respective config is valid before going through"
}
# TODO: Make sure the config is correct and all locations are clear before doing anything

db_add() {
    # Make sure that ~/.local/share/sequestrum exists first or db won't work
    [[ ! -d $HOME/.local/share/sequestrum ]] &&
        mkdir "$HOME/.local/share/sequestrum"
    
    # Check to see either to add a package or location to conflict.
    if [ "$1" == "location" ]; then
        [[ ! -e $HOME/.local/share/sequestrum/$2 ]] &&
            die "Cannot install a location when package $2 isn't. Serious error, please report to Github."
        echo -e "$3\n" >> "$HOME/.local/share/sequestrum/$2"
    elif [ "$1" == "package" ]; then
        [[ -e $HOME/.local/share/sequestrum/$2 ]] &&
            die "First check has failed horribly or forgot to add. Serious error, please report to Github."
        touch "$HOME/.local/share/sequestrum/$2"
    elif [ "$1" == "metabase" ]; then
        [[ -e "$HOME/.local/share/sequestrum/meta_${2}" ]] &&
            die "Cannot add to database an already installed metabase. Serious error, please report to Github."
        touch "$HOME/.local/share/sequestrum/meta_${2}"
    elif [ "$1" == "metapackage" ]; then
        # TODO: Add error checking
        touch "$HOME/.local/share/sequestrum/${2}_${3}"
    else
        die "Invalid parameter 1 passed into db_add"
    fi
}

die() {
    printf 'error: %s\n' "$1" >&2
    exit 1
}

add_location() {
    mv  "$1" "$dotfile_location/$2"
    # TODO: Add support for meta package adding.
    # Check to make sure the package is installed
    if [ -e "$HOME/.local/share/sequestrum/$2" ]; then
        # Make sure the config file exist before symlinking it 
        [[ ! -e $dotfile_location/$2/.seq_pkg ]] &&
            die "Can't install $1 since $2 is missing .seq_pkg"

        source "$dotfile_location/$2/.seq_pkg"
        db_add "location" "$2" "$1"
        ln -s "$dotfile_location/$2/$1" "$link_location/$1"
        die "File was added and installed to package $2"
    else
        die "File was added to package $2 but not installed since package isn't either."
    fi
}

configure_location() {
    # Add a way to change a package's link location as well, make sure its not installed to avoid errors :D 
    [[ -e "$HOME/.local/share/sequestrum/.dot_location" ]] &&
        rm "$HOME/.local/share/sequestrum/.dot_location"
    touch "$HOME/.local/share/sequestrum/.dot_location"
    echo -e "dotfile_location=$1" >> "$HOME/.local/share/sequestrum/.dot_location"
}

# REMEMBER TO DO CHECKS BEFORE EVERYTHING STARTS
install_package() {
    # TODO: if a package fails, clean up all the symlinks already made.
    pkgs=()
    if [ "$3" != "metapackage" ]; then
        source "$dotfile_location/$1/.seq_pkg"
    else
        source "$dotfile_location/$2/$1/.seq_pkg"
    fi

    if [ ! ${#pkgs[@]} -eq 0 ]; then
        if [ ! -e "$HOME/.local/share/sequestrum/meta_${1}" ]; then
            db_add "metabase" "$1"
            for pkg in "${pkgs[@]}"; do
                db_add "metapackage" "$1" "$pkg"
                install_package "$pkg" "$1" "metapackage"
            done
        else
            die "Can't install a metapackage that's already installed."
        fi
    elif [ "$3" == "metapackage" ]; then
        # $1 is the metapackage, $2 is the base
        if [ -e "$HOME/.local/share/sequestrum/meta_$2" ]; then
            for location in "$dotfile_location/$2/$1/"*; do
                [[ "$location" != ".seq_pkg" ]] &&
                    ln -s "$location" "$link_location/$(basename "$location")"
                    db_add "location" "$2_$1" "$(basename "$location")"
            done
        else
            die "Cannot installed metapackage when base is not installed. Serious error, please report to Github."
        fi
    else
        # Add error checking to make sure its not a subpackage
        if [ ! -e "$HOME/.local/share/sequestrum/$1" ]; then
            db_add "package" "$1"
            for location in "$dotfile_location/$1/"*; do
                [[ "$location" != ".seq_pkg" ]] &&
                    ln -s "$location" "$link_location/$(basename "$location")"
                    db_add "location" "$1" "$(basename "$location")"
            done
        else
            die "Can't install a package that's already installed."
        fi
    fi
}

status() {
    #TODO: Add support for pretty status for metapackages
    red='\033[0;31m'
    grn='\033[0;32m'
    nc='\033[0m'
    uninstalled=()

    # New way, loop through all packages, if installed then print and if not then save it as a package to look over later.
    any_installed=false;
    echo ""
    echo "$(basename "${dotfile_location}")/"
    numofpackages=0
    for package in "$dotfile_location/"*; do
        numofpackages=$((numofpackages+1))
    done
    packagecount=0
    for package in "$dotfile_location/"*; do
        if [ -e "$HOME/.local/share/sequestrum/$(basename "$package")" ] || [ -e "$HOME/.local/share/sequestrum/meta_$(basename "$package")" ]; then
            packagecount=$((packagecount+1))
            if [ $packagecount -ne $numofpackages ]; then
                echo -e "├── ${grn}$(basename "$package")/${nc}"
            else
                echo -e "└── ${grn}$(basename "$package")/${nc}"
            fi
            
            numofsubpackages=0
            for subpackage in "$dotfile_location/$(basename "$package")"*; do
                numofsubpackages=$((numofsubpackages+1))
            done
            subpackagecount=0
            for subpackage in "$dotfile_location/$(basename "$package")/"*; do
                if [ "$(basename "$subpackage")"  != ".seq_pkg" ]; then
                    subpackagecount=$((subpackagecount+1))
                    if [ $subpackagecount -ne $numofsubpackages ]; then
                        if [ $packagecount -eq $numofpackages ]; then
                            symbol="    ├──"
                        else
                            symbol="│   ├──"
                        fi
                    else
                        if [ $packagecount -eq $numofpackages ]; then
                            symbol="    └──"
                        else
                            symbol="│   └──"
                        fi
                    fi
                    
                    if [ -d "$subpackage" ]; then
                        echo -e "${symbol} ${grn}$(basename "$subpackage")/${nc}"
                    else
                        echo -e "${symbol} ${grn}$(basename "$subpackage")${nc}"
                    fi
                fi
            done
        else
            packagecount=$((packagecount+1))
            if [ "$(basename "$package")" != ".seq_pkg" ]; then
                if [ $packagecount -ne $numofpackages ]; then
                    echo -e "├── ${red}$(basename "$package")/${nc}"
                else
                    echo -e "└── ${red}$(basename "$package")/${nc}"
                fi
                
                numofsubpackages=0
                for subpackage in "$dotfile_location/$(basename "$package")"*; do
                    numofsubpackages=$((numofsubpackages+1))
                done
                subpackagecount=0
                for subpackage in "$dotfile_location/$(basename "$package")/"*; do
                    if [ "$(basename "$subpackage")"  != ".seq_pkg" ]; then
                        subpackagecount=$((subpackagecount+1))
                        if [ $subpackagecount -ne $numofsubpackages ]; then
                            if [ $packagecount -eq $numofpackages ]; then
                                symbol="    ├──"
                            else
                                symbol="│   ├──"
                            fi
                        else
                            if [ $packagecount -eq $numofpackages ]; then
                                symbol="    └──"
                            else
                                symbol="│   └──"
                            fi
                        fi
                        
                        if [ -d "$subpackage" ]; then
                            echo -e "${symbol} ${red}$(basename "$subpackage")/${nc}"
                        else
                            echo -e "${symbol} ${red}$(basename "$subpackage")${nc}"
                        fi
                    fi
                done
            fi
        fi
        uninstalled+=("$(basename "$package")")
    done
    echo ""
    shopt -s dotglob
}

unlink_package() {
    # TODO: UNLINKING META PACKAGES

    pkgs=()
    if [ "$3" != "metapackage" ]; then
        source "$dotfile_location/$1/.seq_pkg"
    else
        source "$dotfile_location/$2/$1/.seq_pkg"
    fi

    if [ ! ${#pkgs[@]} -eq 0 ]; then
        if [ -e "$HOME/.local/share/sequestrum/meta_${1}" ]; then
            for pkg in "${pkgs[@]}"; do
                unlink_package "$pkg" "$1" "metapackage"
            done
            rm "$HOME/.local/share/sequestrum/meta_${1}"
        else
            die "Can't uninstall a metapackage not already installed."
        fi
    elif [ "$3" == "metapackage" ]; then
        # $1 is the metapackage, $2 is the base
        if [ -e "$HOME/.local/share/sequestrum/$2_$1" ]; then
            source "$dotfile_location/$2/$1/.seq_pkg"
            while IFS= read -r line
            do
                if [ "$line" != "" ]; then
                    unlink "$link_location/$line"
                fi
            done < "$HOME/.local/share/sequestrum/${2}_${1}"
            rm "$HOME/.local/share/sequestrum/$2_$1"
        else
            die "Cannot uninstall metapackage when it is not installed. Serious error, please report to Github."
        fi
    else
        if [ -e "$HOME/.local/share/sequestrum/$1" ]; then
            source "$dotfile_location/$1/.seq_pkg"
            while IFS= read -r line
            do
                if [ "$line" != "" ]; then 
                    unlink "$link_location/$line"
                fi
            done < "$HOME/.local/share/sequestrum/$1"
            rm "$HOME/.local/share/sequestrum/$1"
        else
            die "Can't unlink a package that isn't installed."
        fi
    fi
}


usage() { printf '%s' "\
sequestrum 2.0.0 - dotfile manager
=> [a]dd [location] [package] - Add a file/folder to a package and install it.
=> [c]onfigure - Set the location of your dotfile directory. (Leave off last /)
=> [i]nstall [package] - Install package onto local system.
=> [s]tatus - Check out the status of all packages in your dotfile.
=> [u]nlink  [package] - Unlink package from local system.
"
exit 1
}

main() {
    [[ $1 == -? || -z $1 ]] &&
        usage
    
    [[ $1 == [a]* && -z $2 ]] &&
        die "Missing [location] argument"
    
    [[ $1 == [a]* && ! -e $2 ]] &&
        die "Location $2 does not exist."

    [[ $1 == [iu]* && -z $2 || $1 == [a]* && -z $3 ]] &&
        die "Missing [package] argument."
    
    [[ $1 == [a]* && ! -e $dotfile_location/$3 ]] &&
        die "Package $3 does not exist."
    
    [[ $1 == [iu]* && ! -e $dotfile_location/$2 ]] &&
        die "Package $2 does not exist."

    [[ $1 == [c]* && -z $2 ]] &&
        die "Missing location to set as new dotfile directory."

    [[ $1 == [c]* && ! -d $2 ]] &&
        die "Cannot set dotfile directory to a folder that doesn't exist"


    case $1 in
        a*)
            add_location "$2" "$3"
            ;;
        c*)
            configure_location "$2"
            ;;
        i*)
            install_package "$2"
            ;;
        s*)
            status "$2"
            ;;
        u*)
            unlink_package "$2"
            ;;
        *)
            usage
            ;;
    esac
}

main "$@"
